From 85ec3ae70b905ddf9e16d86c468446d74867743f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Niccol=C3=B2=20Venerandi?= <niccolo@venerandi.com>
Date: Mon, 3 Jun 2024 12:19:59 +0200
Subject: [PATCH] Emit a LeaveEvent on drag and drop start

All focused windows will now receive a LeaveEvent when a drag and drop starts.
This makes sure that the dragged element does not preserve any hover decoration
during the drag and drop, and that other elements that happen to take place
of the dragged elements don't become hovered too.

Change-Id: I0924fff987f143aff11284c808027dd210b48c2b
Reviewed-by: David Edmundson <davidedmundson@kde.org>
(cherry picked from commit 1efbdb25df80790dca919b1d5c31a67513caebfa)
Reviewed-by: Qt Cherry-pick Bot <cherrypick_bot@qt-project.org>
(cherry picked from commit 6f2eac491f0ddbcdda2abd9f8382d305968c42d2)
---
 src/client/qwaylanddnd.cpp         |  5 +++++
 src/client/qwaylandinputdevice.cpp | 14 ++++++++++++++
 src/client/qwaylandinputdevice_p.h |  2 ++
 3 files changed, 21 insertions(+)

diff --git a/src/client/qwaylanddnd.cpp b/src/client/qwaylanddnd.cpp
index 5ea1e0d33..096d7e5b5 100644
--- a/src/client/qwaylanddnd.cpp
+++ b/src/client/qwaylanddnd.cpp
@@ -28,6 +28,11 @@ QWaylandDrag::~QWaylandDrag()
 
 void QWaylandDrag::startDrag()
 {
+    // Some compositors do not send a pointer leave before starting a drag, some do.
+    // This is discussed upstream at: https://gitlab.freedesktop.org/wayland/wayland/-/issues/444
+    // For consistency between compositors we emit the leave event here, upon drag start.
+    m_display->currentInputDevice()->handleStartDrag();
+
     QBasicDrag::startDrag();
     QWaylandWindow *icon = static_cast<QWaylandWindow *>(shapedPixmapWindow()->handle());
     if (m_display->currentInputDevice()->dataDevice()->startDrag(drag()->mimeData(), drag()->supportedActions(), icon)) {
diff --git a/src/client/qwaylandinputdevice.cpp b/src/client/qwaylandinputdevice.cpp
index 059df99bc..1109d2cc9 100644
--- a/src/client/qwaylandinputdevice.cpp
+++ b/src/client/qwaylandinputdevice.cpp
@@ -523,6 +523,12 @@ void QWaylandInputDevice::handleEndDrag()
         mPointer->releaseButtons();
 }
 
+void QWaylandInputDevice::handleStartDrag()
+{
+    if (mPointer)
+        mPointer->leavePointers();
+}
+
 #if QT_CONFIG(wayland_datadevice)
 void QWaylandInputDevice::setDataDevice(QWaylandDataDevice *device)
 {
@@ -881,6 +887,14 @@ void QWaylandInputDevice::Pointer::releaseButtons()
     }
 }
 
+void QWaylandInputDevice::Pointer::leavePointers()
+{
+    if (auto *window = focusWindow()) {
+        LeaveEvent e(focusWindow(), mSurfacePos, mGlobalPos);
+        window->handleMouse(mParent, e);
+    }
+}
+
 class WheelEvent : public QWaylandPointerEvent
 {
 public:
diff --git a/src/client/qwaylandinputdevice_p.h b/src/client/qwaylandinputdevice_p.h
index becd5f9be..91bcf405c 100644
--- a/src/client/qwaylandinputdevice_p.h
+++ b/src/client/qwaylandinputdevice_p.h
@@ -92,6 +92,7 @@ public:
 #if QT_CONFIG(cursor)
     void setCursor(const QCursor *cursor, const QSharedPointer<QWaylandBuffer> &cachedBuffer = {}, int fallbackOutputScale = 1);
 #endif
+    void handleStartDrag();
     void handleEndDrag();
 
 #if QT_CONFIG(wayland_datadevice)
@@ -320,6 +321,7 @@ private:
 
 public:
     void releaseButtons();
+    void leavePointers();
 
     QWaylandInputDevice *mParent = nullptr;
     QPointer<QWaylandSurface> mFocus;
-- 
GitLab

