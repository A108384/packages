From 0fc3f30dd4fdd94d930738b4a99f028e2417035a Mon Sep 17 00:00:00 2001
From: Vlad Zahorodnii <vlad.zahorodnii@kde.org>
Date: Mon, 8 Jul 2024 11:42:30 +0300
Subject: [PATCH] Client: Initialize wl_egl_window and EGLSurface both at the
 same time

The wl_egl_window_resize() resize callback in Mesa is crafted in a way
that assumes that the eglCreateWindowSurface() function has been called
right after the wl_egl_window_create() function. So Mesa accesses its
privately stored data in the wl_egl_window struct without any checks.

On the other hand, it appears like the eglCreateWindowSurface() function
can fail sometimes and right after that, the window can be resized too,
which would lead to a crash.

In order to handle that case better, this change makes QtWayland
initialize both the wl_egl_window and the EGLSurface at the same time,
so the wl_egl_window_resize() function can't be called without a valid
EGLSurface object.

Pick-to: 6.7 6.8
Change-Id: Id4d652ec68fba66271043997b8e9bb24672f4ad5
Reviewed-by: David Edmundson <davidedmundson@kde.org>
---
 .../client/wayland-egl/qwaylandeglwindow.cpp  | 22 +++++++++++++------
 1 file changed, 15 insertions(+), 7 deletions(-)

diff --git a/src/hardwareintegration/client/wayland-egl/qwaylandeglwindow.cpp b/src/hardwareintegration/client/wayland-egl/qwaylandeglwindow.cpp
index 180688691..260f6e6e1 100644
--- a/src/hardwareintegration/client/wayland-egl/qwaylandeglwindow.cpp
+++ b/src/hardwareintegration/client/wayland-egl/qwaylandeglwindow.cpp
@@ -111,20 +111,28 @@ void QWaylandEglWindow::updateSurface(bool create)
                 m_resize = true;
             }
         } else if (create && mSurface) {
-            m_waylandEglWindow = wl_egl_window_create(mSurface->object(), sizeWithMargins.width(), sizeWithMargins.height());
-            m_requestedSize = sizeWithMargins;
-        }
+            wl_egl_window *eglWindow = wl_egl_window_create(mSurface->object(), sizeWithMargins.width(), sizeWithMargins.height());
+            if (Q_UNLIKELY(!eglWindow)) {
+                qCWarning(lcQpaWayland, "Could not create wl_egl_window with size %dx%d\n", sizeWithMargins.width(), sizeWithMargins.height());
+                return;
+            }
 
-        if (!m_eglSurface && m_waylandEglWindow && create) {
-            EGLNativeWindowType eglw = (EGLNativeWindowType) m_waylandEglWindow;
             QSurfaceFormat fmt = window()->requestedFormat();
             if (mDisplay->supportsWindowDecoration())
                 fmt.setAlphaBufferSize(8);
             EGLConfig eglConfig = q_configFromGLFormat(m_clientBufferIntegration->eglDisplay(), fmt);
             m_format = q_glFormatFromConfig(m_clientBufferIntegration->eglDisplay(), eglConfig, fmt);
-            m_eglSurface = eglCreateWindowSurface(m_clientBufferIntegration->eglDisplay(), eglConfig, eglw, 0);
-            if (Q_UNLIKELY(m_eglSurface == EGL_NO_SURFACE))
+
+            EGLSurface eglSurface = eglCreateWindowSurface(m_clientBufferIntegration->eglDisplay(), eglConfig, (EGLNativeWindowType) eglWindow, 0);
+            if (Q_UNLIKELY(eglSurface == EGL_NO_SURFACE)) {
                 qCWarning(lcQpaWayland, "Could not create EGL surface (EGL error 0x%x)\n", eglGetError());
+                wl_egl_window_destroy(eglWindow);
+                return;
+            }
+
+            m_waylandEglWindow = eglWindow;
+            m_eglSurface = eglSurface;
+            m_requestedSize = sizeWithMargins;
         }
     }
 }
-- 
GitLab

