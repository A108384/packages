From 5a1a840ce67c2a36dc49b11d34112d9aa24a6efa Mon Sep 17 00:00:00 2001
From: Evgenii Averin <86725875+averinevg@users.noreply.github.com>
Date: Fri, 17 Nov 2023 02:17:03 +0100
Subject: [PATCH] [clang-tidy] Use config file for clang-tidy configuration
 (#2489)

---
 .clang-tidy                                   | 193 +++++++++++++++++-
 CMakeLists.txt                                | 143 +------------
 addkernels/addkernels.cpp                     |  20 ++
 addkernels/include_inliner.cpp                |   2 +
 cmake/ClangTidy.cmake                         |   5 +-
 speedtests/sequences.cpp                      |   2 +
 src/bz2.cpp                                   |   6 +
 src/comgr.cpp                                 |   2 +
 src/conv/invokers/mlir_impl_gemm.cpp          |   4 +
 src/conv/solver_finders.cpp                   |   2 +
 src/convolution.cpp                           |   6 +
 src/convolution_api.cpp                       |  34 +++
 src/ctc.cpp                                   |   2 +
 src/db_path.cpp.in                            |   4 +
 src/driver_arguments.cpp                      |   2 +
 src/exec_utils.cpp                            |   2 +
 src/find_controls.cpp                         |  22 ++
 src/fusion.cpp                                |   2 +
 src/gemm_v2.cpp                               |  34 +++
 src/hip/batched_transpose_sol.cpp             |   7 +-
 src/hip/handlehip.cpp                         |   2 +
 src/hipoc/hipoc_program.cpp                   |   6 +
 src/include/miopen/conv/asm_implicit_gemm.hpp |   4 +
 src/include/miopen/convolution.hpp            |   2 +
 src/include/miopen/db_record.hpp              |   2 +
 src/include/miopen/env.hpp                    |   4 +
 src/include/miopen/execution_context.hpp      |   4 +
 src/include/miopen/find_solution.hpp          |   8 +
 src/include/miopen/generic_search.hpp         |   4 +
 src/include/miopen/hipoc_kernel.hpp           |   2 +
 src/include/miopen/kern_db.hpp                |   6 +
 src/include/miopen/magic_div.hpp              |   2 +
 src/include/miopen/sequences.hpp              |   4 +
 src/include/miopen/solver.hpp                 |   4 +
 .../miopen/solver/ck_utility_common.hpp       |   4 +
 .../miopen/solver/implicitgemm_util.hpp       |  10 +-
 src/include/miopen/sqlite_db.hpp              |  18 ++
 src/include/miopen/tensor_ops.hpp             |   2 +
 src/include/miopen/tensor_reorder_util.hpp    |  10 +
 src/invoker_cache.cpp                         |   6 +
 src/kernel_cache.cpp                          |   2 +
 src/kernels/hip_float8.hpp                    |   4 +
 src/logger.cpp                                |  32 ++-
 src/ocl/convolutionocl.cpp                    |  18 ++
 src/ocl/ctcocl.cpp                            |  10 +
 src/ocl/rnnocl.cpp                            |  18 ++
 src/operator.cpp                              |   2 +
 src/problem.cpp                               |   4 +
 src/reducetensor.cpp                          |  44 ++++
 src/reducetensor_api.cpp                      |  23 ++-
 src/rnn.cpp                                   |   8 +
 src/rnn/Solutions/rnn_transformer.cpp         |  22 ++
 src/rnn/rnn_util.cpp                          |  16 ++
 src/rnn_api.cpp                               |  42 ++--
 src/seq_tensor.cpp                            |  10 +
 src/solution.cpp                              |   8 +
 src/solver/conv_MP_bidirectional_winograd.cpp |  20 ++
 src/solver/conv_asm_1x1u_bias_activ_fused.cpp |   4 +
 src/solver/conv_asm_dir_BwdWrW1x1.cpp         |   4 +
 src/solver/conv_asm_dir_BwdWrW3x3.cpp         |  32 +++
 .../conv_asm_implicit_gemm_gtc_bwd_nhwc.cpp   |   8 +
 src/solver/conv_asm_implicit_gemm_gtc_fwd.cpp |   2 +
 .../conv_asm_implicit_gemm_gtc_fwd_nhwc.cpp   |   8 +
 .../conv_asm_implicit_gemm_gtc_wrw_nhwc.cpp   |  10 +
 .../conv_asm_implicit_gemm_v4r1_dynamic.cpp   |  12 +-
 ...m_implicit_gemm_wrw_gtc_dynamic_xdlops.cpp |   6 +
 ...onv_asm_implicit_gemm_wrw_v4r1_dynamic.cpp |   2 +
 src/solver/conv_bin_winoRxS_fused.cpp         |   6 +
 .../conv_ck_igemm_fwd_v6r1_dlops_nchw.cpp     |   2 +
 src/solver/conv_direct_naive_conv.cpp         |  16 ++
 src/solver/conv_direct_naive_conv_bwd.cpp     |   2 +
 .../conv_hip_implicit_gemm_bwd_v1r1.cpp       |   4 +
 ...conv_hip_implicit_gemm_bwd_v1r1_xdlops.cpp |   2 +
 .../conv_hip_implicit_gemm_fwd_v4r1.cpp       |   4 +
 ...licit_gemm_fwd_v4r4_xdlops_padded_gemm.cpp |   2 +
 ...conv_hip_implicit_gemm_wrw_v4r4_xdlops.cpp |   2 +
 ...licit_gemm_wrw_v4r4_xdlops_padded_gemm.cpp |   2 +
 src/solver/conv_multipass_wino3x3WrW.cpp      |  28 +++
 src/solver/conv_ocl_dir2D_bwdWrW_1x1.cpp      |   2 +
 src/solver/conv_ocl_dir2D_bwdWrW_2.cpp        |   2 +
 src/solver/conv_ocl_dir2Dfwd1x1.cpp           |   2 +
 .../conv_ocl_dir2Dfwd_exhaustive_search.cpp   |   6 +
 src/solver/conv_winoRxS.cpp                   |   2 +
 src/solver/conv_wino_fury_RxS.cpp             |   2 +
 src/solver/fft.cpp                            |  14 ++
 src/solver/gemm.cpp                           |  10 +
 src/solver/gemm_bwd.cpp                       |  12 ++
 src/sqlite_db.cpp                             |   2 +
 src/tensor.cpp                                |   2 +
 test/cbna_inference.cpp                       |   4 +
 test/conv_common.hpp                          |  17 +-
 test/cpu_conv.hpp                             |   4 +
 test/cpu_reduce_util.hpp                      |   8 +
 test/ctc.cpp                                  |  20 ++
 test/driver.hpp                               |  14 ++
 test/dropout.cpp                              |   2 +
 test/dropout_util.hpp                         |  10 +
 test/gpu_nchw_nhwc_transpose.cpp              |  20 +-
 test/gpu_reference_kernel.cpp                 |  20 +-
 test/handle_test.cpp                          |  28 +++
 test/na_inference.cpp                         |   2 +
 test/na_train.cpp                             |   2 +
 test/perfdb.cpp                               |  14 ++
 test/pooling_common.hpp                       |   6 +-
 test/reduce_test.cpp                          |  28 ++-
 test/soft_max.cpp                             |  24 +++
 test/sqlite_perfdb.cpp                        |  12 ++
 test/tensor_reorder.cpp                       |  22 +-
 test/tensor_trans.cpp                         |  10 +
 test/tensor_util.hpp                          |   4 +
 test/tensor_vec.cpp                           |   8 +
 111 files changed, 1129 insertions(+), 245 deletions(-)

diff --git a/.clang-tidy b/.clang-tidy
index 5c2b781687..37a8aa66a1 100644
--- a/.clang-tidy
+++ b/.clang-tidy
@@ -1,3 +1,192 @@
+# Some checks are suppressed:
+#
+# This check is useless for us. Many objects (like tensors or problem descriptions)
+# have mutiple parameters of the same type
+#   -bugprone-easily-swappable-parameters
+#
+# Too many narrowing conversions in our code
+#   -bugprone-narrowing-conversions
+#
+# We shouldn't be using rand()
+#   -cert-msc30-c
+#
+# We really shouldn't use bitwise operators with signed integers, but opencl leaves us no choice
+#   -hicpp-signed-bitwise
+#
+# This one is extremely slow, and probably has lots of FPs
+#   -misc-confusable-identifiers
+#
+# TODO We are not ready to use it, but very useful
+#   -readability-function-cognitive-complexity
+#
+# We dont think this is a useful check. Disabled on migraphx
+#   -readability-identifier-length
+#
+# There are many FPs with this, let's disable it (ditto in MIGraphX)
+#   -readability-suspicious-call-argument
+#
+# TODO Code Quality WORKAROUND ROCm 5.1 update
+#   -cert-err33-c
+#   -google-readability-casting
+#   -hicpp-use-emplace
+#   -modernize-use-emplace
+#   -performance-unnecessary-copy-initialization
+#   -readability-container-data-pointer
+#
+# TODO Code Quality WORKAROUND ROCm 5.3 && Ubuntu 22.04 && C++17 && cppcheck 2.9 update
+#   -bugprone-use-after-move
+#   -clang-analyzer-cplusplus.NewDeleteLeaks
+#   -hicpp-deprecated-headers
+#   -hicpp-invalid-access-moved
+#   -hicpp-member-init
+#   -modernize-concat-nested-namespaces
+#   -modernize-deprecated-headers
+#   -modernize-macro-to-enum
+#   -modernize-unary-static-assert
+#   -modernize-use-nodiscard
+#   -performance-no-automatic-move
+#   -readability-redundant-declaration
+#   -readability-simplify-boolean-expr
+#
+# TODO Code Quality WORKAROUND ROCm 5.4.2
+#   -misc-const-correctness
+#
+# TODO Code Quality WORKAROUND ROCm 5.6
+#   -cppcoreguidelines-avoid-const-or-ref-data-members
+#   -cppcoreguidelines-avoid-do-while
+#   -misc-use-anonymous-namespace
+#
+# TODO Code Quality WORKAROUND ROCm 5.7
+#   -bugprone-lambda-function-name
+#   -cppcoreguidelines-avoid-capture-default-when-capturing-this
+#   -cppcoreguidelines-rvalue-reference-param-not-moved
+#   -llvmlibc-inline-function-decl
+#   -readability-avoid-unconditional-preprocessor-if
+#
+Checks: >-
+  *,
+  -abseil-*,
+  -altera-*,
+  -android-cloexec-fopen,
+  -bugprone-easily-swappable-parameters,
+  -bugprone-exception-escape,
+  -bugprone-lambda-function-name,
+  -bugprone-macro-parentheses,
+  -bugprone-narrowing-conversions,
+  -bugprone-use-after-move,
+  -cert-env33-c,
+  -cert-err33-c,
+  -cert-msc30-c,
+  -cert-msc32-c,
+  -cert-msc50-cpp,
+  -cert-msc51-cpp,
+  -clang-analyzer-alpha.core.CastToStruct,
+  -clang-analyzer-cplusplus.NewDeleteLeaks,
+  -clang-analyzer-optin.performance.Padding,
+  -clang-diagnostic-extern-c-compat,
+  -clang-diagnostic-unused-command-line-argument,
+  -cppcoreguidelines-avoid-c-arrays,
+  -cppcoreguidelines-avoid-capture-default-when-capturing-this,
+  -cppcoreguidelines-avoid-const-or-ref-data-members,
+  -cppcoreguidelines-avoid-do-while,
+  -cppcoreguidelines-avoid-magic-numbers,
+  -cppcoreguidelines-explicit-virtual-functions,
+  -cppcoreguidelines-init-variables,
+  -cppcoreguidelines-macro-usage,
+  -cppcoreguidelines-narrowing-conversions,
+  -cppcoreguidelines-non-private-member-variables-in-classes,
+  -cppcoreguidelines-prefer-member-initializer,
+  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
+  -cppcoreguidelines-pro-bounds-constant-array-index,
+  -cppcoreguidelines-pro-bounds-pointer-arithmetic,
+  -cppcoreguidelines-pro-type-member-init,
+  -cppcoreguidelines-pro-type-reinterpret-cast,
+  -cppcoreguidelines-pro-type-union-access,
+  -cppcoreguidelines-pro-type-vararg,
+  -cppcoreguidelines-rvalue-reference-param-not-moved,
+  -cppcoreguidelines-special-member-functions,
+  -fuchsia-*,
+  -google-explicit-constructor,
+  -google-readability-casting,
+  -google-readability-todo,
+  -google-runtime-int,
+  -google-runtime-references,
+  -hicpp-avoid-c-arrays,
+  -hicpp-deprecated-headers,
+  -hicpp-explicit-conversions,
+  -hicpp-invalid-access-moved,
+  -hicpp-member-init,
+  -hicpp-named-parameter,
+  -hicpp-no-array-decay,
+  -hicpp-signed-bitwise,
+  -hicpp-special-member-functions,
+  -hicpp-uppercase-literal-suffix,
+  -hicpp-use-auto,
+  -hicpp-use-emplace,
+  -hicpp-use-equals-default,
+  -hicpp-use-override,
+  -hicpp-vararg,
+  -llvm-else-after-return,
+  -llvm-header-guard,
+  -llvm-include-order,
+  -llvmlibc-callee-namespace,
+  -llvmlibc-implementation-in-namespace,
+  -llvmlibc-inline-function-decl,
+  -llvmlibc-restrict-system-libc-headers,
+  -llvm-qualified-auto,
+  -misc-confusable-identifiers,
+  -misc-const-correctness,
+  -misc-misplaced-const,
+  -misc-non-private-member-variables-in-classes,
+  -misc-no-recursion,
+  -misc-use-anonymous-namespace,
+  -modernize-avoid-bind,
+  -modernize-avoid-c-arrays,
+  -modernize-deprecated-headers,
+  -modernize-macro-to-enum,
+  -modernize-pass-by-value,
+  -modernize-use-auto,
+  -modernize-use-default-member-init,
+  -modernize-use-emplace,
+  -modernize-use-equals-default,
+  -modernize-use-trailing-return-type,
+  -modernize-use-transparent-functors,
+  -modernize-use-nodiscard,
+  -modernize-concat-nested-namespaces,
+  -modernize-unary-static-assert,
+  -performance-no-automatic-move,
+  -performance-unnecessary-copy-initialization,
+  -performance-unnecessary-value-param,
+  -readability-avoid-unconditional-preprocessor-if,
+  -readability-container-data-pointer,
+  -readability-convert-member-functions-to-static,
+  -readability-else-after-return,
+  -readability-function-cognitive-complexity,
+  -readability-identifier-length,
+  -readability-isolate-declaration,
+  -readability-magic-numbers,
+  -readability-named-parameter,
+  -readability-qualified-auto,
+  -readability-redundant-declaration,
+  -readability-redundant-string-init,
+  -readability-simplify-boolean-expr,
+  -readability-suspicious-call-argument,
+  -readability-uppercase-literal-suffix,
+
 CheckOptions:
-  - key: bugprone-reserved-identifier.AllowedIdentifiers
-    value: '__HIP_PLATFORM_HCC__;__HIP_ROCclr__'
+  - key: google-readability-braces-around-statements.ShortStatementLines
+    value: '6'
+  - key: hicpp-braces-around-statements.ShortStatementLines
+    value: '6'
+  - key: readability-braces-around-statements.ShortStatementLines
+# TODO:
+# Current value is 6. Even 4 is too much, but clang-tidy counts all lines after if(...) and with 2
+# it generates warning even for trivial if-else statement:
+#     if(...)
+#         do_this();
+#     else
+#         do_that();
+# This also applies to aliases:
+#     google-readability-braces-around-statements and
+#     hicpp-braces-around-statements
+    value: '6'
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 498a7c9afa..5ae431a41e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -544,153 +544,11 @@ if(CMAKE_CXX_COMPILER MATCHES ".*clang\\+\\+")
 # Enable tidy on hip
 elseif(MIOPEN_BACKEND STREQUAL "HIP" OR MIOPEN_BACKEND STREQUAL "HIPNOGPU")
     set(MIOPEN_TIDY_ERRORS ALL)
-
 endif()
 
 include(ClangTidy)
 enable_clang_tidy(
     CHECKS
-        *
-        -abseil-*
-        -altera-*
-        -android-cloexec-fopen
-        # This check is useless for us. Many objects (like tensors or problem descriptions)
-        # naturally have mutiple parameters of the same type.
-        -bugprone-easily-swappable-parameters
-        -bugprone-exception-escape
-        -bugprone-macro-parentheses
-        # too many narrowing conversions in our code
-        -bugprone-narrowing-conversions
-        -cert-dcl37-c
-        -cert-dcl51-cpp
-        -cert-env33-c
-        # Yea we shouldn't be using rand()
-        -cert-msc30-c
-        -cert-msc32-c
-        -cert-msc50-cpp
-        -cert-msc51-cpp
-        -clang-analyzer-alpha.core.CastToStruct
-        -clang-analyzer-optin.performance.Padding
-        -clang-diagnostic-extern-c-compat
-        -clang-diagnostic-unused-command-line-argument
-        -cppcoreguidelines-avoid-c-arrays
-        -cppcoreguidelines-avoid-magic-numbers
-        -cppcoreguidelines-explicit-virtual-functions
-        -cppcoreguidelines-init-variables
-        -cppcoreguidelines-macro-usage
-        -cppcoreguidelines-narrowing-conversions
-        -cppcoreguidelines-non-private-member-variables-in-classes
-        -cppcoreguidelines-prefer-member-initializer
-        -cppcoreguidelines-pro-bounds-array-to-pointer-decay
-        -cppcoreguidelines-pro-bounds-constant-array-index
-        -cppcoreguidelines-pro-bounds-pointer-arithmetic
-        -cppcoreguidelines-pro-type-member-init
-        -cppcoreguidelines-pro-type-reinterpret-cast
-        -cppcoreguidelines-pro-type-union-access
-        -cppcoreguidelines-pro-type-vararg
-        -cppcoreguidelines-special-member-functions
-        -fuchsia-*
-        -google-explicit-constructor
-        -google-readability-braces-around-statements
-        -google-readability-todo
-        -google-runtime-int
-        -google-runtime-references
-        -hicpp-avoid-c-arrays
-        -hicpp-braces-around-statements
-        -hicpp-explicit-conversions
-        -hicpp-named-parameter
-        -hicpp-no-array-decay
-        # We really shouldn't use bitwise operators with signed integers, but opencl leaves us no choice
-        -hicpp-signed-bitwise
-        -hicpp-special-member-functions
-        -hicpp-uppercase-literal-suffix
-        -hicpp-use-auto
-        -hicpp-use-equals-default
-        -hicpp-use-override
-        -hicpp-vararg
-        -llvm-else-after-return
-        -llvm-header-guard
-        -llvm-include-order
-        -llvmlibc-callee-namespace
-        -llvmlibc-implementation-in-namespace
-        -llvmlibc-restrict-system-libc-headers
-        -llvm-qualified-auto
-        # This one is extremely slow, and probably has lots of FPs.
-        -misc-confusable-identifiers
-        -misc-misplaced-const
-        -misc-non-private-member-variables-in-classes
-        -misc-no-recursion
-        -modernize-avoid-bind
-        -modernize-avoid-c-arrays
-        -modernize-pass-by-value
-        -modernize-use-auto
-        -modernize-use-default-member-init
-        -modernize-use-equals-default
-        -modernize-use-trailing-return-type
-        -modernize-use-transparent-functors
-        -modernize-use-nodiscard
-        -modernize-concat-nested-namespaces
-        -modernize-unary-static-assert
-        -performance-unnecessary-value-param
-        -readability-braces-around-statements
-        -readability-convert-member-functions-to-static
-        -readability-else-after-return
-        # TODO We are not ready to use it, but very useful.
-        -readability-function-cognitive-complexity
-        # We dont think this is a useful check. Disabled on migraphx.
-        -readability-identifier-length
-        -readability-isolate-declaration
-        -readability-magic-numbers
-        -readability-named-parameter
-        -readability-qualified-auto
-        -readability-redundant-string-init
-        # There are many FPs with this, let's disable it (ditto in MIGraphX)
-        -readability-suspicious-call-argument
-        -readability-uppercase-literal-suffix
-        ###################################################################
-        # TODO Code Quality WORKAROUND ROCm 5.1 update
-        ###################################################################
-        -cert-err33-c
-        -google-readability-casting
-        -hicpp-use-emplace
-        -modernize-use-emplace
-        -performance-unnecessary-copy-initialization
-        -readability-container-data-pointer
-        ###################################################################
-        # TODO Code Quality WORKAROUND ROCm 5.3 &&
-        # Ubuntu 22.04 && C++17 && cppcheck 2.9 update
-        ###################################################################
-        -bugprone-use-after-move
-        -hicpp-invalid-access-moved
-        -modernize-use-nodiscard
-        -modernize-unary-static-assert
-        -modernize-macro-to-enum
-        -modernize-concat-nested-namespaces
-        -readability-redundant-declaration
-        -readability-simplify-boolean-expr
-        -hicpp-deprecated-headers
-        -hicpp-member-init
-        -performance-no-automatic-move
-        -clang-analyzer-cplusplus.NewDeleteLeaks
-        -modernize-deprecated-headers
-        ###################################################################
-        # TODO Code Quality WORKAROUND ROCm 5.4.2
-        ###################################################################
-        -misc-const-correctness
-        ###################################################################
-        # TODO Code Quality WORKAROUND ROCm 5.6
-        ###################################################################
-        -cppcoreguidelines-avoid-const-or-ref-data-members
-        -cppcoreguidelines-avoid-do-while
-        -misc-use-anonymous-namespace
-        ###################################################################
-        # TODO Code Quality WORKAROUND ROCm 5.7
-        ###################################################################
-        -llvmlibc-inline-function-decl
-        -cppcoreguidelines-avoid-capture-default-when-capturing-this
-        -cppcoreguidelines-rvalue-reference-param-not-moved
-        -readability-avoid-unconditional-preprocessor-if
-        -bugprone-lambda-function-name
         ${MIOPEN_TIDY_CHECKS}
     ${MIOPEN_TIDY_ERRORS}
     HEADER_FILTER
@@ -698,6 +556,7 @@ enable_clang_tidy(
     EXTRA_ARGS
         -DMIOPEN_USE_CLANG_TIDY
 )
+
 include(CppCheck)
 enable_cppcheck(
     CHECKS
diff --git a/cmake/ClangTidy.cmake b/cmake/ClangTidy.cmake
index fc3eb75315..6e8ecf4409 100644
--- a/cmake/ClangTidy.cmake
+++ b/cmake/ClangTidy.cmake
@@ -93,8 +93,6 @@ macro(enable_clang_tidy)
         set(CLANG_TIDY_ALL ALL)
     endif()
 
-    message(STATUS "Clang tidy checks: ${CLANG_TIDY_CHECKS}")
-
     if (${PARSE_ANALYZE_TEMPORARY_DTORS})
         set(CLANG_TIDY_ANALYZE_TEMPORARY_DTORS "-analyze-temporary-dtors")
     endif()
@@ -149,9 +147,8 @@ function(clang_tidy_check TARGET)
             string(MAKE_C_IDENTIFIER "${SOURCE}" tidy_file)
             set(tidy_target tidy-target-${TARGET}-${tidy_file})
             add_custom_target(${tidy_target}
-                # for some targets clang-tidy not able to get information from .clang-tidy
                 DEPENDS ${SOURCE}
-                COMMAND ${CLANG_TIDY_COMMAND} "-config=\{CheckOptions: \[\{key: bugprone-reserved-identifier.AllowedIdentifiers,value: __HIP_PLATFORM_HCC__\; __HIP_ROCclr__\}\]\}" ${SOURCE} "-export-fixes=${CLANG_TIDY_FIXIT_DIR}/${TARGET}-${tidy_file}.yaml"
+                COMMAND ${CLANG_TIDY_COMMAND} "-config-file=${PROJECT_SOURCE_DIR}/.clang-tidy" ${SOURCE} "-export-fixes=${CLANG_TIDY_FIXIT_DIR}/${TARGET}-${tidy_file}.yaml"
                 WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                 COMMENT "clang-tidy: Running clang-tidy on target ${SOURCE}..."
             )
