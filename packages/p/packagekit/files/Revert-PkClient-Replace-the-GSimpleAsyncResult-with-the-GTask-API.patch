From f1dd59de4eccc7b795ce6ff52aad1e3da214016a Mon Sep 17 00:00:00 2001
From: Joey Riches <josephriches@gmail.com>
Date: Wed, 28 Aug 2024 15:39:05 +0100
Subject: [PATCH 1/1] Revert "PkClient: Replace the GSimpleAsyncResult with the
 GTask API"

This reverts commit b068646d2fbb246c590a47531688c69df2699fa6.
---
 lib/packagekit-glib2/pk-client.c | 167 ++++++++++++++++---------------
 1 file changed, 89 insertions(+), 78 deletions(-)

diff --git a/lib/packagekit-glib2/pk-client.c b/lib/packagekit-glib2/pk-client.c
index 3cbb0d859..51afb457c 100644
--- a/lib/packagekit-glib2/pk-client.c
+++ b/lib/packagekit-glib2/pk-client.c
@@ -163,7 +163,7 @@ struct _PkClientState
 	GDBusProxy			*proxy_props;
 	GCancellable			*cancellable;
 	GCancellable			*cancellable_client;
-	GTask				*res;
+	GSimpleAsyncResult		*res;
 	PkBitfield			 filters;
 	PkClient			*client;
 	PkProgress			*progress;
@@ -212,15 +212,11 @@ pk_client_state_remove (PkClient *client, PkClientState *state)
 	}
 }
 
-/*
- * pk_client_state_finish:
- * @state: (transfer full): the #PkClientState
- * @error: (transfer full): the #GError
- **/
 static void
-pk_client_state_finish (PkClientState *state, GError *error)
+pk_client_state_finish (PkClientState *state, const GError *error)
 {
 	gboolean ret;
+	g_autoptr(GError) error_local = NULL;
 
 	if (state->res == NULL)
 		return;
@@ -242,17 +238,15 @@ pk_client_state_finish (PkClientState *state, GError *error)
 		g_object_unref (G_OBJECT (state->proxy_props));
 
 	if (state->ret) {
-		g_task_return_pointer (state->res,
-		                       g_object_ref (state->results),
-		                       g_object_unref);
+		g_simple_async_result_set_op_res_gpointer (state->res,
+							   g_object_ref (state->results),
+							   g_object_unref);
 	} else {
-		g_task_return_error (state->res, error);
+		g_simple_async_result_set_from_error (state->res, error);
 	}
 
 	/* remove any socket file */
 	if (state->client_helper != NULL) {
-		g_autoptr(GError) error_local = NULL;
-
 		if (!pk_client_helper_stop (state->client_helper, &error_local))
 			g_warning ("failed to stop the client helper: %s", error_local->message);
 		g_object_unref (state->client_helper);
@@ -261,6 +255,9 @@ pk_client_state_finish (PkClientState *state, GError *error)
 	/* remove from list */
 	pk_client_state_remove (state->client, state);
 
+	/* complete */
+	g_simple_async_result_complete_in_idle (state->res);
+
 	/* mark the state as finished */
 	g_clear_object (&state->res);
 }
@@ -345,7 +342,7 @@ pk_client_cancel_cb (GObject *source_object,
 		g_debug ("failed to cancel: %s", error->message);
 
 		if (state)
-			pk_client_state_finish (state, g_steal_pointer (&error));
+			pk_client_state_finish (state, error);
 	}
 }
 
@@ -372,7 +369,7 @@ pk_client_cancellable_cancel_cb (GCancellable *cancellable,
 		g_debug ("Cancelled, but no proxy, not sure what to do here");
 		local_error = g_error_new_literal (PK_CLIENT_ERROR, PK_CLIENT_ERROR_FAILED,
 						   "PackageKit transaction disappeared");
-		pk_client_state_finish (state, g_steal_pointer (&local_error));
+		pk_client_state_finish (state, local_error);
 		return;
 	}
 
@@ -398,10 +395,9 @@ pk_client_state_new (PkClient *client,
 
 	state = g_object_new (PK_TYPE_CLIENT_STATE, NULL);
 	state->role = role;
-	state->cancellable = g_cancellable_new ();
-	state->res = g_task_new (client, state->cancellable, callback_ready, user_data);
+	state->res = g_simple_async_result_new (G_OBJECT (client), callback_ready, user_data, source_tag);
 	state->client = g_object_ref (client);
-	g_task_set_source_tag (state->res, source_tag);
+	state->cancellable = g_cancellable_new ();
 
 	if (cancellable != NULL) {
 		state->cancellable_client = g_object_ref (cancellable);
@@ -1010,7 +1006,7 @@ pk_client_copy_downloaded_finished_cb (GFile *file, GAsyncResult *res, PkClientS
 
 	/* get the result */
 	if (!g_file_copy_finish (file, res, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -1079,7 +1075,7 @@ pk_client_copy_downloaded_file (PkClientState *state, const gchar *package_id, c
 			     PK_CLIENT_ERROR,
 			     PK_ERROR_ENUM_FILE_CONFLICTS,
 			     "file %s already exists", path);
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 	g_file_copy_async (source, destination, G_FILE_COPY_OVERWRITE,
@@ -1185,7 +1181,7 @@ pk_client_signal_finished (PkClientState *state,
 					     "Failed: %s",
 					     pk_exit_enum_to_string (exit_enum));
 		}
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -1619,7 +1615,7 @@ pk_client_signal_cb (GDBusProxy *proxy,
 		if (state->waiting_for_finished) {
 			local_error = g_error_new_literal (PK_CLIENT_ERROR, PK_CLIENT_ERROR_FAILED,
 							   "PackageKit transaction disappeared");
-			pk_client_state_finish (state, g_steal_pointer (&local_error));
+			pk_client_state_finish (state, local_error);
 		}
 		return;
 	}
@@ -1641,7 +1637,7 @@ pk_client_notify_name_owner_cb (GObject *obj,
 
 		local_error = g_error_new_literal (PK_CLIENT_ERROR, PK_CLIENT_ERROR_FAILED,
 						   "PackageKit daemon disappeared");
-		pk_client_state_finish (state, g_steal_pointer (&local_error));
+		pk_client_state_finish (state, local_error);
 	} else {
 		pk_client_state_unset_proxy (state);
 		g_cancellable_cancel (state->cancellable);
@@ -1698,7 +1694,7 @@ pk_client_method_cb (GObject *source_object,
 	if (value == NULL) {
 		/* fix up the D-Bus error */
 		pk_client_fixup_dbus_error (error);
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -1743,7 +1739,7 @@ pk_client_set_hints_cb (GObject *source_object,
 	if (value == NULL) {
 		/* fix up the D-Bus error */
 		pk_client_fixup_dbus_error (error);
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -2355,7 +2351,7 @@ pk_client_get_tid_cb (GObject *object, GAsyncResult *res, gpointer user_data)
 
 	state->tid = pk_control_get_tid_finish (control, res, &error);
 	if (state->tid == NULL) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -2388,11 +2384,17 @@ pk_client_get_tid_cb (GObject *object, GAsyncResult *res, gpointer user_data)
 PkResults *
 pk_client_generic_finish (PkClient *client, GAsyncResult *res, GError **error)
 {
+	GSimpleAsyncResult *simple;
+
 	g_return_val_if_fail (PK_IS_CLIENT (client), NULL);
-	g_return_val_if_fail (G_IS_TASK (res), NULL);
+	g_return_val_if_fail (G_IS_SIMPLE_ASYNC_RESULT (res), NULL);
 	g_return_val_if_fail (error == NULL || *error == NULL, NULL);
 
-	return g_task_propagate_pointer (G_TASK (res), error);
+	simple = G_SIMPLE_ASYNC_RESULT (res);
+	if (g_simple_async_result_propagate_error (simple, error))
+		return NULL;
+
+	return g_object_ref (g_simple_async_result_get_op_res_gpointer (simple));
 }
 
 /**
@@ -2436,7 +2438,7 @@ pk_client_resolve_async (PkClient *client, PkBitfield filters, gchar **packages,
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -2490,7 +2492,7 @@ pk_client_search_names_async (PkClient *client, PkBitfield filters, gchar **valu
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -2545,7 +2547,7 @@ pk_client_search_details_async (PkClient *client, PkBitfield filters, gchar **va
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -2598,7 +2600,7 @@ pk_client_search_groups_async (PkClient *client, PkBitfield filters, gchar **val
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -2651,7 +2653,7 @@ pk_client_search_files_async (PkClient *client, PkBitfield filters, gchar **valu
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -2704,7 +2706,7 @@ pk_client_get_details_async (PkClient *client, gchar **package_ids, GCancellable
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -2754,14 +2756,14 @@ pk_client_get_details_local_async (PkClient *client, gchar **files, GCancellable
 	state->progress = pk_progress_new ();
 	state->files = pk_client_convert_real_paths (files, &error);
 	if (state->files == NULL) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -2811,14 +2813,14 @@ pk_client_get_files_local_async (PkClient *client, gchar **files, GCancellable *
 	state->progress = pk_progress_new ();
 	state->files = pk_client_convert_real_paths (files, &error);
 	if (state->files == NULL) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -2871,7 +2873,7 @@ pk_client_get_update_detail_async (PkClient *client, gchar **package_ids, GCance
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -2925,7 +2927,7 @@ pk_client_download_packages_async (PkClient *client, gchar **package_ids, const
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -2976,7 +2978,7 @@ pk_client_get_updates_async (PkClient *client, PkBitfield filters, GCancellable
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3027,7 +3029,7 @@ pk_client_get_old_transactions_async (PkClient *client, guint number, GCancellab
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3083,7 +3085,7 @@ pk_client_depends_on_async (PkClient *client, PkBitfield filters, gchar **packag
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3134,7 +3136,7 @@ pk_client_get_packages_async (PkClient *client, PkBitfield filters, GCancellable
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3190,7 +3192,7 @@ pk_client_required_by_async (PkClient *client, PkBitfield filters, gchar **packa
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3248,7 +3250,7 @@ pk_client_what_provides_async (PkClient *client,
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3298,7 +3300,7 @@ pk_client_get_distro_upgrades_async (PkClient *client, GCancellable *cancellable
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3350,7 +3352,7 @@ pk_client_get_files_async (PkClient *client, gchar **package_ids, GCancellable *
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3399,7 +3401,7 @@ pk_client_get_categories_async (PkClient *client, GCancellable *cancellable,
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3466,7 +3468,7 @@ pk_client_remove_packages_async (PkClient *client,
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3520,7 +3522,7 @@ pk_client_refresh_cache_async (PkClient *client, gboolean force, GCancellable *c
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3574,7 +3576,7 @@ pk_client_install_packages_async (PkClient *client, PkBitfield transaction_flags
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3629,7 +3631,7 @@ pk_client_install_signature_async (PkClient *client, PkSigTypeEnum type, const g
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3688,7 +3690,7 @@ pk_client_update_packages_async (PkClient *client,
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3713,7 +3715,7 @@ pk_client_copy_native_finished_cb (GFile *file, GAsyncResult *res, gpointer user
 
 	/* get the result */
 	if (!g_file_copy_finish (file, res, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3826,7 +3828,7 @@ pk_client_install_files_async (PkClient *client,
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3836,7 +3838,7 @@ pk_client_install_files_async (PkClient *client,
 	/* check files are valid */
 	state->files = pk_client_convert_real_paths (files, &error);
 	if (state->files == NULL) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3899,7 +3901,7 @@ pk_client_accept_eula_async (PkClient *client, const gchar *eula_id, GCancellabl
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -3950,7 +3952,7 @@ pk_client_get_repo_list_async (PkClient *client, PkBitfield filters, GCancellabl
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -4003,7 +4005,7 @@ pk_client_repo_enable_async (PkClient *client, const gchar *repo_id, gboolean en
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -4059,7 +4061,7 @@ pk_client_repo_set_data_async (PkClient *client, const gchar *repo_id, const gch
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -4120,7 +4122,7 @@ pk_client_repo_remove_async (PkClient *client,
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -4182,7 +4184,7 @@ pk_client_upgrade_system_async (PkClient *client,
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -4241,7 +4243,7 @@ pk_client_repair_system_async (PkClient *client,
 
 	/* check not already cancelled */
 	if (cancellable != NULL && g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -4270,7 +4272,7 @@ pk_client_adopt_get_proxy_cb (GObject *object,
 
 	state->proxy = g_dbus_proxy_new_for_bus_finish (res, &error);
 	if (state->proxy == NULL) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -4323,7 +4325,7 @@ pk_client_adopt_async (PkClient *client,
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
@@ -4363,25 +4365,28 @@ pk_client_adopt_async (PkClient *client,
 PkProgress *
 pk_client_get_progress_finish (PkClient *client, GAsyncResult *res, GError **error)
 {
+	GSimpleAsyncResult *simple;
+
 	g_return_val_if_fail (PK_IS_CLIENT (client), NULL);
-	g_return_val_if_fail (G_IS_TASK (res), NULL);
+	g_return_val_if_fail (G_IS_SIMPLE_ASYNC_RESULT (res), NULL);
 	g_return_val_if_fail (error == NULL || *error == NULL, NULL);
 
-	return g_task_propagate_pointer (G_TASK (res), error);
+	simple = G_SIMPLE_ASYNC_RESULT (res);
+	if (g_simple_async_result_propagate_error (simple, error))
+		return NULL;
+
+	return g_object_ref (g_simple_async_result_get_op_res_gpointer (simple));
 }
 
 /*
  * pk_client_get_progress_state_finish:
- * @state: a #PkClientState
- * @error: (transfer full)
  **/
 static void
-pk_client_get_progress_state_finish (PkClientState *state, GError *error)
+pk_client_get_progress_state_finish (PkClientState *state, const GError *error)
 {
 	if (state->cancellable_id > 0) {
 		g_cancellable_disconnect (state->cancellable_client,
 					  state->cancellable_id);
-		state->cancellable_id = 0;
 	}
 	g_clear_object (&state->cancellable);
 	g_clear_object (&state->cancellable_client);
@@ -4392,15 +4397,21 @@ pk_client_get_progress_state_finish (PkClientState *state, GError *error)
 		g_object_unref (G_OBJECT (state->proxy_props));
 
 	if (state->ret) {
-		g_task_return_pointer (state->res,
-		                       g_object_ref (state->progress),
-		                       g_object_unref);
+		g_simple_async_result_set_op_res_gpointer (state->res,
+							   g_object_ref (state->progress),
+							   g_object_unref);
 	} else {
-		g_task_return_error (state->res, g_steal_pointer (&error));
+		g_simple_async_result_set_from_error (state->res, error);
 	}
 
 	/* remove from list */
 	pk_client_state_remove (state->client, state);
+
+	/* complete */
+	g_simple_async_result_complete_in_idle (state->res);
+
+	/* destroy state */
+	g_object_unref (state);
 }
 
 /*
@@ -4416,7 +4427,7 @@ pk_client_get_progress_cb (GObject *source_object,
 
 	state->proxy = g_dbus_proxy_new_for_bus_finish (res, &error);
 	if (state->proxy == NULL) {
-		pk_client_get_progress_state_finish (state, g_steal_pointer (&error));
+		pk_client_get_progress_state_finish (state, error);
 		return;
 	}
 
@@ -4461,7 +4472,7 @@ pk_client_get_progress_async (PkClient *client,
 	/* check not already cancelled */
 	if (cancellable != NULL &&
 	    g_cancellable_set_error_if_cancelled (cancellable, &error)) {
-		pk_client_state_finish (state, g_steal_pointer (&error));
+		pk_client_state_finish (state, error);
 		return;
 	}
 
-- 
2.46.0

