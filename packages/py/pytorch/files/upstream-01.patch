From 8c2c3a03fb87c3568a22362d83b00d82b9fb3db2 Mon Sep 17 00:00:00 2001
From: Jeff Daily <jeff.daily@amd.com>
Date: Mon, 1 Jul 2024 21:00:32 +0000
Subject: [PATCH] [ROCm] std::clamp work-around for hip-clang compiler
 (#127812)

Fixes #127666.

Other std math functions are replaced with those in the global namespace during hipify. HIP does not claim to support every function in the C++ standard library. std::clamp is not yet supported and we have been relying on the std implementation. For Fedora 40 + gcc 14, a host-side assert is used which is not supported. Work-around this by replacing std::clamp with min and max for USE_ROCM builds.

Patch comes from @lamikr. Modified to use #ifndef USE_ROCM.

https://github.com/lamikr/rocm_sdk_builder/pull/37

Pull Request resolved: https://github.com/pytorch/pytorch/pull/127812
Approved by: https://github.com/hongxiayang, https://github.com/malfet
---
 aten/src/ATen/native/cuda/IndexKernel.cu | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/aten/src/ATen/native/cuda/IndexKernel.cu b/aten/src/ATen/native/cuda/IndexKernel.cu
index 9e6db8af0e661..a160b0f8db520 100644
--- a/aten/src/ATen/native/cuda/IndexKernel.cu
+++ b/aten/src/ATen/native/cuda/IndexKernel.cu
@@ -259,7 +259,13 @@ void index_put_kernel_quantized_cuda(TensorIterator& iter, const IntArrayRef ind
 
     gpu_index_kernel(iter, index_size, index_stride, [inv_scale, zero_point, qmin, qmax]C10_DEVICE(char* const out_data, const char* const in_data, const int64_t offset) {
       int64_t qvalue = static_cast<int64_t>(zero_point + nearbyintf(*(float*)in_data * inv_scale));
+      // See https://github.com/pytorch/pytorch/issues/127666
+      // hip-clang std::clamp __glibcxx_assert_fail host function when building on Fedora40/gcc14
+#ifndef USE_ROCM
       qvalue = std::clamp(qvalue, qmin, qmax);
+#else
+      qvalue = (qvalue < qmin) ? qmin : (qmax < qvalue) ? qmax : qvalue;
+#endif
       *(scalar_t*)(out_data + offset) = static_cast<scalar_t>(qvalue);
     });
   });
