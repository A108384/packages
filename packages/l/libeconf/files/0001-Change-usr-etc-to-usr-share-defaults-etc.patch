From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Reilly Brogan <reilly@reillybrogan.com>
Date: Sun, 12 Nov 2023 16:20:29 -0600
Subject: [PATCH] Change /usr/etc to /usr/share/defaults/etc

---
 doc/man/econftool.8 |  2 +-
 doc/man/libeconf.3  |  4 ++--
 example/example.c   |  2 +-
 include/libeconf.h  | 34 +++++++++++++++-------------------
 lib/mergefiles.c    |  2 +-
 util/econftool.c    |  4 ++--
 6 files changed, 22 insertions(+), 26 deletions(-)

diff --git a/doc/man/econftool.8 b/doc/man/econftool.8
index 5887952..c88af64 100644
--- a/doc/man/econftool.8
+++ b/doc/man/econftool.8
@@ -9,7 +9,7 @@ Tool which allows to easily manage the configuration file snippets.
 .SH COMMANDS
 .TP
 .B show
-Reads all snippets for <filename>.conf (in /usr/etc and /etc),
+Reads all snippets for <filename>.conf (in /usr/share/defaults/etc and /etc),
 and prints all groups,keys and their values.
 The root directories is /. It can be set by the environment variable $ECONFTOOL_ROOT.
 .TP
diff --git a/doc/man/libeconf.3 b/doc/man/libeconf.3
index 673f211..7b1ae6e 100644
--- a/doc/man/libeconf.3
+++ b/doc/man/libeconf.3
@@ -141,7 +141,7 @@ Documentation: \fI\%https://github.com/openSUSE/libeconf/blob/master/bindings/cs
 .ti -1c
 .RI "\fBeconf_err\fP \fBeconf_readConfig\fP (\fBeconf_file\fP **key_file, const char *project, const char *usr_subdir, const char *config_name, const char *config_suffix, const char *delim, const char *comment)"
 .br
-.RI "Evaluating key/values of a given configuration by reading and merging all needed/available files in three different directories (normally in /usr/etc, /run and /etc)\&. "
+.RI "Evaluating key/values of a given configuration by reading and merging all needed/available files in three different directories (normally in /usr/share/defaults/etc, /run and /etc)\&. "
 .ti -1c
 .RI "\fBeconf_err\fP \fBeconf_readConfigWithCallback\fP (\fBeconf_file\fP **key_file, const char *project, const char *usr_subdir, const char *config_name, const char *config_suffix, const char *delim, const char *comment, bool (*callback)(const char *filename, const void *data), const void *callback_data)"
 .br
@@ -773,7 +773,7 @@ Usage:
 econf_file *key_file_1 = NULL, *key_file_2 = NULL, *key_file_ret = NULL
 econf_err error;
 
-error = econf_readFile (&key_file1, "/usr/etc/test\&.conf", "=", "#");
+error = econf_readFile (&key_file1, "/usr/share/defaults/etc/test\&.conf", "=", "#");
 error = econf_readFile (&key_file2, /etc/test\&.conf", "=", "#");
 error = econf_mergeFiles (&key_file_ret, key_file_1, key_file_2);
 
diff --git a/example/example.c b/example/example.c
index 19c0d8d..dcc9aa0 100644
--- a/example/example.c
+++ b/example/example.c
@@ -40,7 +40,7 @@ int main(void) {
 
   econf_file *key_file;
 
-  if (econf_readDirs(&key_file, "example/usr/etc", "example/etc",
+  if (econf_readDirs(&key_file, "example/usr/share/defaults/etc", "example/etc",
 				"example", ".ini", "=", "#"))
     return 1; /* XXX better error handling */
 
diff --git a/include/libeconf.h b/include/libeconf.h
index 72aadc6..e699b7e 100644
--- a/include/libeconf.h
+++ b/include/libeconf.h
@@ -221,7 +221,7 @@ extern econf_err econf_readFileWithCallback(econf_file **result, const char *fil
  *   econf_file *key_file_1 = NULL, *key_file_2 = NULL, *key_file_ret = NULL
  *   econf_err error;
  *
- *   error = econf_readFile (&key_file1, "/usr/etc/test.conf", "=", "#");
+ *   error = econf_readFile (&key_file1, "/usr/share/defaults/etc/test.conf", "=", "#");
  *   error = econf_readFile (&key_file2, /etc/test.conf", "=", "#");
  *   error = econf_mergeFiles (&key_file_ret, key_file_1, key_file_2);
  *
@@ -463,11 +463,11 @@ extern econf_err econf_readConfigWithCallback(econf_file **key_file,
 
 
 /** @brief Evaluating key/values of a given configuration by reading and merging all
- *         needed/available files in two different directories (normally in /usr/etc and /etc).
+ *         needed/available files in two different directories (normally in /usr/share/defaults/etc and /etc).
  *         DEPRECATED: Use the econf_readConfig/econf_readConfigWithCallback instead.
  *
  * @param key_file content of parsed file(s). MUST be initialized (e.g. with NULL).
- * @param usr_conf_dir absolute path of the first directory (normally "/usr/etc")
+ * @param usr_conf_dir absolute path of the first directory (normally "/usr/share/defaults/etc")
  * @param etc_conf_dir absolute path of the second directory (normally "/etc")
  * @param config_name basename of the configuration file
  * @param config_suffix suffix of the configuration file. Can also be NULL.
@@ -477,7 +477,7 @@ extern econf_err econf_readConfigWithCallback(econf_file **key_file,
  * @param comment array of characters which define the start of a comment
  * @return econf_err ECONF_SUCCESS or error code
  *
- * Example: Reading content of example.conf in /usr/etc and /etc directory.
+ * Example: Reading content of example.conf in /usr/share/defaults/etc and /etc directory.
  * @code
  *   #include "libeconf.h"
  *
@@ -485,7 +485,7 @@ extern econf_err econf_readConfigWithCallback(econf_file **key_file,
  *   econf_err error;
  *
  *   error = econf_readDirs (&key_file,
- *                           "/usr/etc",
+ *                           "/usr/share/defaults/etc",
  *                           "/etc",
  *                           "example",
  *                           "conf",
@@ -506,17 +506,13 @@ econf_readDirs(econf_file **key_file,
 	       const char *comment);
 
 /** @brief Evaluating key/values for every given configuration files in two different
- *  directories (normally in /usr/etc and /etc). For each parsed file the user defined function
+ *  directories (normally in /usr/share/defaults/etc and /etc). For each parsed file the user defined function
  *  will be called in order e.g. to check the correct file permissions.
  *  DEPRECATED: Use the econf_readConfig/econf_readConfigWithCallback instead.
  *
  * @param key_file content of parsed file(s). MUST be initialized (e.g. with NULL).
- * @param usr_conf_dir absolute path of the first directory (normally "/usr/etc")
+ * @param usr_conf_dir absolute path of the first directory (normally "/usr/share/defaults/etc")
  * @param etc_conf_dir absolute path of the second directory (normally "/etc")
- * @param config_name basename of the configuration file
- * @param config_suffix suffix of the configuration file. Can also be NULL.
- * @param delim delimiters of key/value e.g. "\t ="
- *        If delim contains space characters AND none space characters,
  *        multiline values are not parseable.
  * @param comment array of characters which define the start of a comment
  * @param callback function which will be called for each file. This user defined function has the
@@ -525,7 +521,7 @@ econf_readDirs(econf_file **key_file,
  * @param callback_data pointer which will be given to the callback function.
  * @return econf_err ECONF_SUCCESS or error code
  *
- * Example: Reading content of example.conf in /usr/etc and /etc directory.
+ * Example: Reading content of example.conf in /usr/share/defaults/etc and /etc directory.
  * @code
  *   #include "libeconf.h"
  *
@@ -538,7 +534,7 @@ econf_readDirs(econf_file **key_file,
  *   econf_err error;
  *
  *   error = econf_readDirsWithCallback (&key_file,
- *                                       "/usr/etc",
+ *                                       "/usr/share/defaults/etc",
  *                                       "/etc",
  *                                       "example",
  *                                       "conf",
@@ -563,13 +559,13 @@ econf_readDirsWithCallback(econf_file **key_file,
 			   const void *callback_data);
 
 /** @brief Evaluating key/values for every given configuration files in two different
- *  directories (normally in /usr/etc and /etc). Returns a list of read configuration
+ *  directories (normally in /usr/share/defaults/etc and /etc). Returns a list of read configuration
  *  files and their values.
  *
  * @param key_files list of parsed file(s).
  *        Each entry includes all key/value, path, comments,... information of the regarding file.
  * @param size Size of the evaluated key_files list.
- * @param usr_conf_dir absolute path of the first directory (normally "/usr/etc")
+ * @param usr_conf_dir absolute path of the first directory (normally "/usr/share/defaults/etc")
  * @param etc_conf_dir absolute path of the second directory (normally "/etc")
  * @param config_name basename of the configuration file
  * @param config_suffix suffix of the configuration file. Can also be NULL.
@@ -590,14 +586,14 @@ extern econf_err econf_readDirsHistory(econf_file ***key_files,
 				       const char *comment);
 
 /** @brief Evaluating key/values for every given configuration files in two different
- *  directories (normally in /usr/etc and /etc). For each parsed file the user defined function
+ *  directories (normally in /usr/share/defaults/etc and /etc). For each parsed file the user defined function
  *  will be called in order e.g. to check the correct file permissions.
  *  Returns a list of read configuration files and their values.
  *
  * @param key_files list of parsed file(s).
  *        Each entry includes all key/value, path, comments,... information of the regarding file.
  * @param size Size of the evaluated key_files list.
- * @param usr_conf_dir absolute path of the first directory (normally "/usr/etc")
+ * @param usr_conf_dir absolute path of the first directory (normally "/usr/share/defaults/etc")
  * @param etc_conf_dir absolute path of the second directory (normally "/etc")
  * @param config_name basename of the configuration file
  * @param config_suffix suffix of the configuration file. Can also be NULL.
@@ -646,10 +642,10 @@ extern econf_err econf_newKeyFile(econf_file **result, char delimiter, char comm
  *    will be joined to one entry.
  *  PYTHON_STYLE  (default 0)
  *    E.G. Identations will be handled like multiline entries.
- *  PARSING_DIRS (default /usr/etc/:/run:/etc)
+ *  PARSING_DIRS (default /usr/share/defaults/etc:/run:/etc)
  *    List of directories from which the configuration files have to be parsed.
  *    The list is a string, divides by ":". The last entry has the highest
- *    priority. E.g.: "PARSING_DIRS=/usr/etc/:/run:/etc"
+ *    priority. E.g.: "PARSING_DIRS=/usr/share/defaults/etc:/run:/etc"
  *  CONFIG_DIRS (default <empty>)
  *    List of directory structures (with order) which describes the directories
  *    in which the files have to be parsed.
diff --git a/lib/mergefiles.c b/lib/mergefiles.c
index 46774e8..85e5a7b 100644
--- a/lib/mergefiles.c
+++ b/lib/mergefiles.c
@@ -205,7 +205,7 @@ econf_err merge_econf_files(econf_file **key_files, econf_file **merged_files) {
 
     /* key_files are already sorted. If there is a file with the same name with
        a higher priority, the current file will be ignored. 
-       e.g. /usr/etc/shells.d/tcsh will not be merged if /etc/shells.d/tcsh exists.
+       e.g. /usr/share/defaults/etc/shells.d/tcsh will not be merged if /etc/shells.d/tcsh exists.
     */
     while (*double_key_files) {
       char * compare_file = basename((*double_key_files)->path);
diff --git a/util/econftool.c b/util/econftool.c
index c9cf970..c90e363 100644
--- a/util/econftool.c
+++ b/util/econftool.c
@@ -44,7 +44,7 @@ static char conf_filename[PATH_MAX] = {0}; /* the filename including the suffix
 static char conf_path[PATH_MAX] = {0}; /* the path concatenated with the filename and the suffix */
 static char xdg_config_dir[PATH_MAX] = {0};
 static char root_dir[PATH_MAX] = "/etc";
-static char usr_root_dir[PATH_MAX] = "/usr/etc";
+static char usr_root_dir[PATH_MAX] = "/usr/share/defaults/etc";
 
 /**
  * @brief Shows the usage.
@@ -57,7 +57,7 @@ static void usage(void)
     fprintf(stderr, "Otherwise different files in /etc /usr/vendor and */<filename>.suffix.d/\n");
     fprintf(stderr, "directories will be parsed.\n\n");
     fprintf(stderr, "COMMANDS:\n");
-    fprintf(stderr, "show     reads all snippets for <filename>.conf (in /usr/etc and /etc),\n");
+    fprintf(stderr, "show     reads all snippets for <filename>.conf (in /usr/share/defaults/etc and /etc),\n");
     fprintf(stderr, "         and prints all groups,keys and their values.\n");
     fprintf(stderr, "         The root directories is /. It can be set by the environment\n");
     fprintf(stderr, "         variable $ECONFTOOL_ROOT \n");
