name       : rust
version    : 1.78.0
release    : 128
source     :
    - https://static.rust-lang.org/dist/rustc-1.78.0-src.tar.xz : 8065824f0255faa3901db8206e6f9423f6f8c07cec28bc6f2797c6c948310ece
license    :
    - Apache-2.0
    - MIT
homepage   : https://www.rust-lang.org/
summary    :
    - A fast and secure system programming language
    - devel : Tools and stdlib source for developing with Rust
description:
    - Rust is a systems programming language that runs blazingly fast, prevents nearly all segfaults, and guarantees thread safety.
    - devel : Tools and stdlib source for developing with Rust
component  :
    - programming
libsplit   : no
## Uncomment for bootstrapping
# networking : yes
builddeps  :
    - pkgconfig32(sqlite3)
    - glibc-32bit-devel
    - libgcc-32bit
    - llvm-devel
    - rust
rundeps    :
    # We default to the LLVM toolchain for rust builds
    - llvm-clang
clang      : yes
checkdeps  :
    - fakeroot-32bit
setup      : |
    %patch -p1 -i $pkgfiles/0001-Set-correct-libdir-in-bootstrap.patch

    # Profiling build. "thin-local" is the fastest available LTO type
    sed -e 's|@@LTO@@|thin-local|g' $pkgfiles/config.toml.in > config.toml.pgo

    # PGO build. "fat" is the slowest LTO type but generates the fastest code
    sed -e 's|@@LTO@@|fat|g' $pkgfiles/config.toml.in > config.toml.release

    # Ensure that we use the system sqlite3
    %patch -p1 -i $pkgfiles/rustc-1.78.0-unbundle-sqlite.patch
build      : |
    export LIBSQLITE3_SYS_USE_PKG_CONFIG=1

    ## Generate rustc PGO profiling data
    mkdir $workdir/rustc-pgo-profile-data
    python3 x.py build \
                       --build-dir $workdir/build-pgo \
                       --config config.toml.pgo \
                       --jobs %YJOBS% \
                       --rust-profile-generate $workdir/rustc-pgo-profile-data \
                       --stage 2
    llvm-profdata merge -output=$workdir/rustc-pgo-profile-data/rustc-pgo.profdata $workdir/rustc-pgo-profile-data/default_*.profraw

    # rust-bootstrap is very inconsistent with the stages of various tools that it wants to build between `dist` and `install`. This
    # causes a lot of redundant and unnecessary builds if we attempt to do the build with various stages (IE build the compiler first, then the
    # tools, then install it last). To prevent this from happening just let `install` figure out what it wants.
    DESTDIR=$installdir python3 x.py install \
                                             --build-dir $workdir/build-release \
                                             --config config.toml.release \
                                             --jobs %YJOBS% \
                                             --rust-profile-use $workdir/rustc-pgo-profile-data/rustc-pgo.profdata
install    : |
    install -Dm00644 $installdir/etc/bash_completion.d/* -t $installdir/usr/share/bash-completion/completions
    rm -rvf $installdir/etc

    # Remove text files from libs (manifests, installation logs...)
    find $installdir/%libdir%/rustlib -maxdepth 1 -type f -delete -print

    # Remove license files and such
    rm -rvf $installdir/usr/share/doc
check      : |
    common_opts="--config config.toml.release --build-dir $workdir/build-release --jobs %YJOBS%"
    # Some tests require targets we don't support, such as ARM.
    # For this reason we run only a small subset of the test suite.
    python3 x.py test $common_opts src/test/compile-fail || :
    python3 x.py test $common_opts src/test/pretty       || :
    python3 x.py test $common_opts src/test/run-fail     || :
    python3 x.py test $common_opts src/test/run-make     || :
patterns   :
    - devel :
        - /usr/bin/cargo-clippy
        - /usr/bin/cargo-fmt
        - /usr/bin/clippy-driver
        - /usr/bin/rust-analyzer
        - /usr/bin/rust-demangler
        - /usr/bin/rust-gdb*
        - /usr/bin/rust-lldb
        - /usr/bin/rustfmt
        - /usr/lib64/rustlib/etc/
        - /usr/lib64/rustlib/src/
        - /usr/libexec/rust-analyzer-proc-macro-srv
