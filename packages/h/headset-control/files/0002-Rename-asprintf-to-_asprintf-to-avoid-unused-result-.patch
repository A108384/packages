From 0394d3d932ae3fca377700da0f4d9d5e25dff3cf Mon Sep 17 00:00:00 2001
From: LeixB <abone9999@gmail.com>
Date: Wed, 3 Apr 2024 17:41:41 +0200
Subject: [PATCH 2/2] Rename asprintf to _asprintf to avoid unused-result
 warnings

---
 src/main.c    | 22 +++++++++++-----------
 src/output.c  |  4 ++--
 src/utility.c |  2 +-
 src/utility.h |  2 +-
 4 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/src/main.c b/src/main.c
index b176a8c..9947a6d 100644
--- a/src/main.c
+++ b/src/main.c
@@ -194,7 +194,7 @@ static FeatureResult handle_feature(struct device* device_found, hid_device** de
     if ((device_found->capabilities & B(cap)) == 0) {
         result.status = FEATURE_ERROR;
         result.value  = -1;
-        asprintf(&result.message, "This headset doesn't support %s", capabilities_str[cap]);
+        _asprintf(&result.message, "This headset doesn't support %s", capabilities_str[cap]);
         return result;
     }
 
@@ -205,7 +205,7 @@ static FeatureResult handle_feature(struct device* device_found, hid_device** de
         if (!device_handle | !(*device_handle)) {
             result.status = FEATURE_DEVICE_FAILED_OPEN;
             result.value  = 0;
-            asprintf(&result.message, "Could not open device. Error: %ls", hid_error(*device_handle));
+            _asprintf(&result.message, "Could not open device. Error: %ls", hid_error(*device_handle));
             return result;
         }
     } else {
@@ -226,7 +226,7 @@ static FeatureResult handle_feature(struct device* device_found, hid_device** de
         if (battery.status == BATTERY_AVAILABLE) {
             result.status = FEATURE_SUCCESS;
             result.value  = battery.level;
-            asprintf(&result.message, "Battery: %d%%", battery.level);
+            _asprintf(&result.message, "Battery: %d%%", battery.level);
         } else if (battery.status == BATTERY_CHARGING) {
             result.status  = FEATURE_INFO;
             result.value   = battery.level;
@@ -244,9 +244,9 @@ static FeatureResult handle_feature(struct device* device_found, hid_device** de
             result.value  = (int)battery.status;
 
             if (device_found->idProduct != PRODUCT_TESTDEVICE)
-                asprintf(&result.message, "Error retrieving battery status. Error: %ls", hid_error(*device_handle));
+                _asprintf(&result.message, "Error retrieving battery status. Error: %ls", hid_error(*device_handle));
             else // dont call hid_error on test device
-                asprintf(&result.message, "Error retrieving battery status");
+                _asprintf(&result.message, "Error retrieving battery status");
         }
         return result;
     }
@@ -269,7 +269,7 @@ static FeatureResult handle_feature(struct device* device_found, hid_device** de
         if (ret >= 0) {
             result.status = FEATURE_SUCCESS;
             result.value  = ret;
-            asprintf(&result.message, "Chat-Mix: %d", ret);
+            _asprintf(&result.message, "Chat-Mix: %d", ret);
         } else {
             result.status  = FEATURE_ERROR;
             result.value   = ret;
@@ -324,19 +324,19 @@ static FeatureResult handle_feature(struct device* device_found, hid_device** de
 
     switch (ret) {
     case HSC_READ_TIMEOUT:
-        asprintf(&result.message, "Failed to set/request %s, because of timeout", capabilities_str[cap]);
+        _asprintf(&result.message, "Failed to set/request %s, because of timeout", capabilities_str[cap]);
         break;
     case HSC_ERROR:
-        asprintf(&result.message, "Failed to set/request %s. HeadsetControl Error", capabilities_str[cap]);
+        _asprintf(&result.message, "Failed to set/request %s. HeadsetControl Error", capabilities_str[cap]);
         break;
     case HSC_OUT_OF_BOUNDS:
-        asprintf(&result.message, "Failed to set/request %s. Provided parameter out of boundaries", capabilities_str[cap]);
+        _asprintf(&result.message, "Failed to set/request %s. Provided parameter out of boundaries", capabilities_str[cap]);
         break;
     default: // Must be a HID error
         if (device_found->idProduct != PRODUCT_TESTDEVICE)
-            asprintf(&result.message, "Failed to set/request %s. Error: %d: %ls", capabilities_str[cap], ret, hid_error(*device_handle));
+            _asprintf(&result.message, "Failed to set/request %s. Error: %d: %ls", capabilities_str[cap], ret, hid_error(*device_handle));
         else // dont call hid_error on test device, it will confuse users/devs because it will show success
-            asprintf(&result.message, "Failed to set/request %s. Error: %d", capabilities_str[cap], ret);
+            _asprintf(&result.message, "Failed to set/request %s. Error: %d", capabilities_str[cap], ret);
 
         break;
     }
diff --git a/src/output.c b/src/output.c
index 168ab74..683c511 100644
--- a/src/output.c
+++ b/src/output.c
@@ -155,8 +155,8 @@ HeadsetControlStatus initializeStatus(int num_devices)
 void initializeHeadsetInfo(HeadsetInfo* info, struct device* device)
 {
     info->status = STATUS_SUCCESS;
-    asprintf(&info->idVendor, "0x%04x", device->idVendor);
-    asprintf(&info->idProduct, "0x%04x", device->idProduct);
+    _asprintf(&info->idVendor, "0x%04x", device->idVendor);
+    _asprintf(&info->idProduct, "0x%04x", device->idProduct);
     info->device_name  = device->device_name;
     info->vendor_name  = device->device_hid_vendorname;
     info->product_name = device->device_hid_productname;
diff --git a/src/utility.c b/src/utility.c
index 45ae1d5..224e37d 100644
--- a/src/utility.c
+++ b/src/utility.c
@@ -198,7 +198,7 @@ fail:
     return (-1);
 }
 
-int asprintf(char** str, const char* fmt, ...)
+int _asprintf(char** str, const char* fmt, ...)
 {
     va_list ap;
     int ret;
diff --git a/src/utility.h b/src/utility.h
index 4a41eb6..f12568d 100644
--- a/src/utility.h
+++ b/src/utility.h
@@ -94,4 +94,4 @@ int get_float_data_from_parameter(char* input, float* dest, size_t len);
 
 int vasprintf(char** str, const char* fmt, va_list ap);
 
-int asprintf(char** str, const char* fmt, ...);
+int _asprintf(char** str, const char* fmt, ...);
-- 
2.45.1

