From 9b5026a71e739f027660c726e98017ac6e3f7841 Mon Sep 17 00:00:00 2001
From: Milan Crha <mcrha@redhat.com>
Date: Thu, 6 Apr 2023 18:27:04 +0200
Subject: [PATCH] packagekit: Add sources' related apps as part of a refine job

This allows to split gathering of configured sources and the list
of related (installed) apps for them, to speed up open of a Repositories
dialog.

Closes https://gitlab.gnome.org/GNOME/gnome-software/-/issues/1785
---
 plugins/packagekit/gs-plugin-packagekit.c | 194 ++++++++++++++--------
 1 file changed, 123 insertions(+), 71 deletions(-)

diff --git a/plugins/packagekit/gs-plugin-packagekit.c b/plugins/packagekit/gs-plugin-packagekit.c
index fb49bbd5c4..cccb180df1 100644
--- a/plugins/packagekit/gs-plugin-packagekit.c
+++ b/plugins/packagekit/gs-plugin-packagekit.c
@@ -287,73 +287,6 @@ app_list_get_package_ids (GsAppList       *apps,
 	return g_steal_pointer (&list_package_ids);
 }
 
-static gboolean
-gs_plugin_add_sources_related (GsPlugin *plugin,
-			       GHashTable *hash,
-			       GCancellable *cancellable,
-			       GError **error)
-{
-	guint i;
-	GsApp *app;
-	GsApp *app_tmp;
-	PkBitfield filter;
-	g_autoptr(GsPackagekitHelper) helper = gs_packagekit_helper_new (plugin);
-	g_autoptr(PkTask) task_related = NULL;
-	const gchar *id;
-	gboolean ret = TRUE;
-	g_autoptr(GsAppList) installed = gs_app_list_new ();
-	g_autoptr(PkResults) results = NULL;
-
-	filter = pk_bitfield_from_enums (PK_FILTER_ENUM_INSTALLED,
-					 PK_FILTER_ENUM_NEWEST,
-					 PK_FILTER_ENUM_ARCH,
-					 PK_FILTER_ENUM_NOT_COLLECTIONS,
-					 -1);
-
-	task_related = gs_packagekit_task_new (plugin);
-	gs_packagekit_task_setup (GS_PACKAGEKIT_TASK (task_related), GS_PACKAGEKIT_TASK_QUESTION_TYPE_NONE, gs_plugin_has_flags (plugin, GS_PLUGIN_FLAGS_INTERACTIVE));
-
-	results = pk_client_get_packages (PK_CLIENT (task_related),
-					   filter,
-					   cancellable,
-					   gs_packagekit_helper_cb, helper,
-					   error);
-
-	if (!gs_plugin_packagekit_results_valid (results, cancellable, error)) {
-		g_prefix_error (error, "failed to get sources related: ");
-		return FALSE;
-	}
-	ret = gs_plugin_packagekit_add_results (plugin,
-						installed,
-						results,
-						error);
-	if (!ret)
-		return FALSE;
-	for (i = 0; i < gs_app_list_length (installed); i++) {
-		g_auto(GStrv) split = NULL;
-		app = gs_app_list_index (installed, i);
-		split = pk_package_id_split (gs_app_get_source_id_default (app));
-		if (split == NULL) {
-			g_set_error (error,
-				     GS_PLUGIN_ERROR,
-				     GS_PLUGIN_ERROR_INVALID_FORMAT,
-				     "invalid package-id: %s",
-				     gs_app_get_source_id_default (app));
-			return FALSE;
-		}
-		if (g_str_has_prefix (split[PK_PACKAGE_ID_DATA], "installed:")) {
-			id = split[PK_PACKAGE_ID_DATA] + 10;
-			app_tmp = g_hash_table_lookup (hash, id);
-			if (app_tmp != NULL) {
-				g_debug ("found package %s from %s",
-					 gs_app_get_source_default (app), id);
-				gs_app_add_related (app_tmp, app);
-			}
-		}
-	}
-	return TRUE;
-}
-
 gboolean
 gs_plugin_add_sources (GsPlugin *plugin,
 		       GsAppList *list,
@@ -425,9 +358,7 @@ gs_plugin_add_sources (GsPlugin *plugin,
 		gs_app_list_add (list, app);
 	}
 
-	/* get every application on the system and add it as a related package
-	 * if it matches */
-	return gs_plugin_add_sources_related (plugin, self->cached_sources, cancellable, error);
+	return TRUE;
 }
 
 static gboolean
@@ -1432,6 +1363,32 @@ search_files_data_new_operation (GTask       *refine_task,
 	return g_steal_pointer (&data);
 }
 
+typedef struct {
+	GTask *refine_task;  /* (owned) (not nullable) */
+	GsAppList *sources;  /* (owned) (not nullable) */
+} SourcesRelatedData;
+
+static void
+sources_related_data_free (SourcesRelatedData *data)
+{
+	g_clear_object (&data->sources);
+	g_clear_object (&data->refine_task);
+	g_free (data);
+}
+
+G_DEFINE_AUTOPTR_CLEANUP_FUNC (SourcesRelatedData, sources_related_data_free)
+
+static SourcesRelatedData *
+sources_related_data_new_operation (GTask       *refine_task,
+                                    GsAppList   *sources)
+{
+	g_autoptr(SourcesRelatedData) data = g_new0 (SourcesRelatedData, 1);
+	data->refine_task = refine_task_add_operation (refine_task);
+	data->sources = g_object_ref (sources);
+
+	return g_steal_pointer (&data);
+}
+
 static void upgrade_system_cb (GObject      *source_object,
                                GAsyncResult *result,
                                gpointer      user_data);
@@ -1453,7 +1410,9 @@ static void get_updates_cb (GObject      *source_object,
 static void refine_all_history_cb (GObject      *source_object,
                                    GAsyncResult *result,
                                    gpointer      user_data);
-
+static void sources_related_got_installed_cb (GObject      *source_object,
+					      GAsyncResult *result,
+					      gpointer      user_data);
 static void
 gs_plugin_packagekit_refine_async (GsPlugin            *plugin,
                                    GsAppList           *list,
@@ -1472,6 +1431,7 @@ gs_plugin_packagekit_refine_async (GsPlugin            *plugin,
 	g_autoptr(RefineData) data = NULL;
 	RefineData *data_unowned = NULL;
 	g_autoptr(GError) local_error = NULL;
+	guint n_considered = 0;
 
 	task = g_task_new (plugin, cancellable, callback, user_data);
 	g_task_set_source_tag (task, gs_plugin_packagekit_refine_async);
@@ -1497,6 +1457,8 @@ gs_plugin_packagekit_refine_async (GsPlugin            *plugin,
 		    !gs_app_has_management_plugin (app, GS_PLUGIN (self)))
 			continue;
 
+		n_considered++;
+
 		/* Repositories */
 		filename = gs_app_get_metadata_item (app, "repos::repo-filename");
 
@@ -1536,6 +1498,27 @@ gs_plugin_packagekit_refine_async (GsPlugin            *plugin,
 		}
 	}
 
+	/* Add sources' related apps only when refining sources and nothing else */
+	if ((flags & GS_PLUGIN_REFINE_FLAGS_REQUIRE_RELATED) != 0 &&
+	    n_considered > 0 && gs_app_list_length (repos_list) == n_considered) {
+		PkBitfield filter;
+		g_autoptr(GsPackagekitHelper) helper = gs_packagekit_helper_new (plugin);
+
+		filter = pk_bitfield_from_enums (PK_FILTER_ENUM_INSTALLED,
+						 PK_FILTER_ENUM_NEWEST,
+						 PK_FILTER_ENUM_ARCH,
+						 PK_FILTER_ENUM_NOT_COLLECTIONS,
+						 -1);
+
+		pk_client_get_packages_async (data_unowned->client_refine,
+					      filter,
+					      cancellable,
+					      gs_packagekit_helper_cb, refine_task_add_progress_data (task, helper),
+					      sources_related_got_installed_cb,
+					      sources_related_data_new_operation (task, repos_list));
+
+	}
+
 	/* re-read /var/lib/PackageKit/prepared-update so we know what packages
 	 * to mark as already downloaded and prepared for offline updates */
 	if ((flags & GS_PLUGIN_REFINE_FLAGS_REQUIRE_SIZE) &&
@@ -1816,6 +1799,75 @@ upgrade_system_cb (GObject      *source_object,
 	refine_task_complete_operation (refine_task);
 }
 
+static void
+sources_related_got_installed_cb (GObject      *source_object,
+				  GAsyncResult *result,
+				  gpointer      user_data)
+{
+	PkClient *client = PK_CLIENT (source_object);
+	g_autoptr(SourcesRelatedData) sources_related_data = g_steal_pointer (&user_data);
+	GTask *refine_task = sources_related_data->refine_task;
+	GsPluginPackagekit *self = GS_PLUGIN_PACKAGEKIT (g_task_get_source_object (refine_task));
+	g_autoptr(GHashTable) sources_hash = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, NULL);
+	g_autoptr(PkResults) results = NULL;
+	g_autoptr(GsAppList) installed = gs_app_list_new ();
+	g_autoptr(GError) local_error = NULL;
+
+	results = pk_client_generic_finish (client, result, &local_error);
+	if (!gs_plugin_packagekit_results_valid (results, g_task_get_cancellable (refine_task), &local_error)) {
+		g_prefix_error (&local_error, "failed to get sources related: ");
+		refine_task_complete_operation_with_error (refine_task, g_steal_pointer (&local_error));
+		return;
+	}
+
+	if (!gs_plugin_packagekit_add_results (GS_PLUGIN (self), installed, results, &local_error)) {
+		g_prefix_error (&local_error, "failed to read results for sources related: ");
+		refine_task_complete_operation_with_error (refine_task, g_steal_pointer (&local_error));
+		return;
+	}
+
+	for (guint i = 0; i < gs_app_list_length (sources_related_data->sources); i++) {
+		GsApp *app = gs_app_list_index (sources_related_data->sources, i);
+
+		if (gs_app_has_quirk (app, GS_APP_QUIRK_IS_WILDCARD) ||
+		    gs_app_get_kind (app) != AS_COMPONENT_KIND_REPOSITORY ||
+		    gs_app_get_id (app) == NULL)
+			continue;
+
+		if (!gs_app_has_management_plugin (app, NULL) &&
+		    !gs_app_has_management_plugin (app, GS_PLUGIN (self)))
+			continue;
+
+		g_hash_table_insert (sources_hash, g_strdup (gs_app_get_id (app)), app);
+	}
+
+	for (guint i = 0; i < gs_app_list_length (installed); i++) {
+		g_auto(GStrv) split = NULL;
+		GsApp *app = gs_app_list_index (installed, i);
+		split = pk_package_id_split (gs_app_get_source_id_default (app));
+		if (split == NULL) {
+			g_set_error (&local_error,
+				     GS_PLUGIN_ERROR,
+				     GS_PLUGIN_ERROR_INVALID_FORMAT,
+				     "invalid package-id: %s",
+				     gs_app_get_source_id_default (app));
+			refine_task_complete_operation_with_error (refine_task, g_steal_pointer (&local_error));
+			return;
+		}
+		if (g_str_has_prefix (split[PK_PACKAGE_ID_DATA], "installed:")) {
+			const gchar *id = split[PK_PACKAGE_ID_DATA] + 10;
+			GsApp *app_tmp = g_hash_table_lookup (sources_hash, id);
+			if (app_tmp != NULL) {
+				g_debug ("found package %s from %s",
+					 gs_app_get_source_default (app), id);
+				gs_app_add_related (app_tmp, app);
+			}
+		}
+	}
+
+	refine_task_complete_operation (refine_task);
+}
+
 static gboolean
 gs_plugin_packagekit_refine_finish (GsPlugin      *plugin,
                                     GAsyncResult  *result,
-- 
GitLab

