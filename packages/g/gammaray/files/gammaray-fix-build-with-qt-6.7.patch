diff --git a/common/propertysyncer.cpp b/common/propertysyncer.cpp
index 1e06c20027..c31a950106 100644
--- a/common/propertysyncer.cpp
+++ b/common/propertysyncer.cpp
@@ -53,7 +53,8 @@ void PropertySyncer::addObject(Protocol::ObjectAddress addr, QObject *obj)
         const auto prop = obj->metaObject()->property(i);
         if (!prop.hasNotifySignal())
             continue;
-        connect(obj, QByteArray("2") + prop.notifySignal().methodSignature(), this, SLOT(propertyChanged()));
+        const QByteArray ba = QByteArray("2") + prop.notifySignal().methodSignature();
+        connect(obj, ba, this, SLOT(propertyChanged()));
     }

     connect(obj, &QObject::destroyed, this, &PropertySyncer::objectDestroyed);
diff --git a/core/metaobjectrepository.cpp b/core/metaobjectrepository.cpp
index 8b108b6ccb..bf4f4a5786 100644
--- a/core/metaobjectrepository.cpp
+++ b/core/metaobjectrepository.cpp
@@ -24,6 +24,9 @@
 #include <QFile>
 #include <QObject>
 #include <private/qobject_p.h>
+#if QT_VERSION >= QT_VERSION_CHECK(6, 7, 0)
+#include <private/qcoreevent_p.h>
+#endif
 #include <QSortFilterProxyModel>
 #include <QStringList>
 #include <QThread>
diff --git a/core/probesettings.cpp b/core/probesettings.cpp
index 067e18a445..646c35a656 100644
--- a/core/probesettings.cpp
+++ b/core/probesettings.cpp
@@ -225,8 +225,10 @@ static QVariant getPackageMetaData(const QString &key, const QVariant &defaultVa
 QVariant ProbeSettings::value(const QString &key, const QVariant &defaultValue)
 {
     QByteArray v = s_probeSettings()->settings.value(key.toUtf8());
-    if (v.isEmpty())
-        v = qgetenv("GAMMARAY_" + key.toLocal8Bit());
+    if (v.isEmpty()) {
+        const QByteArray cstr = "GAMMARAY_" + key.toLocal8Bit();
+        v = qgetenv(cstr);
+    }

 #ifdef QT_ANDROIDEXTRAS_LIB
     if (v.isEmpty()) {
diff --git a/core/qmetapropertyadaptor.cpp b/core/qmetapropertyadaptor.cpp
index ab93c4ffa8..9a36a2196a 100644
--- a/core/qmetapropertyadaptor.cpp
+++ b/core/qmetapropertyadaptor.cpp
@@ -44,7 +44,8 @@ void QMetaPropertyAdaptor::doSetObject(const ObjectInstance &oi)
         const QMetaProperty prop = mo->property(i);
         if (!PropertyFilters::matches(propertyMetaData(i))) {
             if (oi.type() == ObjectInstance::QtObject && oi.qtObject() && prop.hasNotifySignal()) {
-                connect(oi.qtObject(), QByteArray("2") + prop.notifySignal().methodSignature(), this, SLOT(propertyUpdated()));
+                const QByteArray sig = QByteArray("2") + prop.notifySignal().methodSignature();
+                connect(oi.qtObject(), sig, this, SLOT(propertyUpdated()));
                 m_notifyToRowMap.insert(prop.notifySignalIndex(), m_rowToPropertyIndex.size());
             }
             m_rowToPropertyIndex.push_back(i);
diff --git a/ui/propertybinder.cpp b/ui/propertybinder.cpp
index a0ac7dbb9c..5be3e881df 100644
--- a/ui/propertybinder.cpp
+++ b/ui/propertybinder.cpp
@@ -56,7 +56,8 @@ void PropertyBinder::add(const char *sourceProp, const char *destProp)
     b.sourceProperty = m_source->metaObject()->property(sourceIndex);
     Q_ASSERT(b.sourceProperty.isValid());
     Q_ASSERT(b.sourceProperty.hasNotifySignal());
-    connect(m_source, QByteArray("2") + b.sourceProperty.notifySignal().methodSignature(), this, SLOT(syncSourceToDestination()));
+    const QByteArray sig1 = QByteArray("2") + b.sourceProperty.notifySignal().methodSignature();
+    connect(m_source, sig1, this, SLOT(syncSourceToDestination()));

     const auto destIndex = m_destination->metaObject()->indexOfProperty(destProp);
     b.destinationProperty = m_destination->metaObject()->property(destIndex);
@@ -69,7 +70,8 @@ void PropertyBinder::add(const char *sourceProp, const char *destProp)
     if (!b.destinationProperty.hasNotifySignal() || !b.sourceProperty.isWritable())
         return;

-    connect(m_destination, QByteArray("2") + b.destinationProperty.notifySignal().methodSignature(), this, SLOT(syncDestinationToSource()));
+    const QByteArray sig2 = QByteArray("2") + b.destinationProperty.notifySignal().methodSignature();
+    connect(m_destination, sig2, this, SLOT(syncDestinationToSource()));
 }

 void PropertyBinder::syncSourceToDestination()
diff --git a/core/metaobjectrepository.cpp b/core/metaobjectrepository.cpp
index 8b108b6..beef22c 100644
--- a/core/metaobjectrepository.cpp
+++ b/core/metaobjectrepository.cpp
@@ -132,7 +132,9 @@ void MetaObjectRepository::initQObjectTypes()
     MO_ADD_PROPERTY_RO(QDateTime, isNull);
     MO_ADD_PROPERTY_RO(QDateTime, isValid);
     MO_ADD_PROPERTY_RO(QDateTime, offsetFromUtc);
+#if QT_VERSION < QT_VERSION_CHECK(6, 7, 0)
     MO_ADD_PROPERTY(QDateTime, timeZone, setTimeZone);
+#endif
 
     MO_ADD_METAOBJECT0(QTimeZone);
     MO_ADD_PROPERTY_RO(QTimeZone, comment);
@@ -214,8 +216,10 @@ void MetaObjectRepository::initQEventTypes()
     MO_ADD_METAOBJECT1(QDynamicPropertyChangeEvent, QEvent);
     MO_ADD_PROPERTY_RO(QDynamicPropertyChangeEvent, propertyName);
 
+#if QT_VERSION < QT_VERSION_CHECK(6, 7, 0)
     MO_ADD_METAOBJECT1(QDeferredDeleteEvent, QEvent);
     MO_ADD_PROPERTY_RO(QDeferredDeleteEvent, loopLevel);
+#endif
 
     MO_ADD_METAOBJECT1(QMetaCallEvent, QEvent);
     MO_ADD_PROPERTY_RO(QMetaCallEvent, id);
diff --git a/core/typetraits.h b/core/typetraits.h
index 20397af..4195e99 100644
--- a/core/typetraits.h
+++ b/core/typetraits.h
@@ -15,6 +15,11 @@
 #define GAMMARAY_TYPETRAITS_H
 
 #include <type_traits>
+#include <QtGlobal>
+// Needed for QDeferredDeleteEvent after Qt 6.7
+#if QT_VERSION >= QT_VERSION_CHECK(6, 7, 0)
+#include <private/qcoreevent_p.h>
+#endif
 
 namespace GammaRay {
 
@@ -27,6 +32,14 @@ Out DynamicCast(In *in)
     return dynamic_cast<Out>(in);
 }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 7, 0)
+template<>
+inline QDeferredDeleteEvent *DynamicCast<QDeferredDeleteEvent *, QEvent>(QEvent *in)
+{
+    return static_cast<QDeferredDeleteEvent *>(in);
+}
+#endif
+
 ///@cond internal
 template<typename Out>
 Out DynamicCast(void *)
diff --git a/plugins/actioninspector/CMakeLists.txt b/plugins/actioninspector/CMakeLists.txt
index 134c3d4..87ceeef 100644
--- a/plugins/actioninspector/CMakeLists.txt
+++ b/plugins/actioninspector/CMakeLists.txt
@@ -18,7 +18,13 @@ if(NOT GAMMARAY_CLIENT_ONLY_BUILD)
         ${gammaray_actioninspector_plugin_srcs}
     )
 
-    target_link_libraries(gammaray_actioninspector_plugin Qt::Gui Qt::Widgets gammaray_core)
+    target_link_libraries(
+        gammaray_actioninspector_plugin
+        Qt::Gui
+        Qt::CorePrivate
+        Qt::Widgets
+        gammaray_core
+    )
 endif()
 
 # ui part
diff --git a/plugins/bluetooth/CMakeLists.txt b/plugins/bluetooth/CMakeLists.txt
index a5c2392..951000e 100644
--- a/plugins/bluetooth/CMakeLists.txt
+++ b/plugins/bluetooth/CMakeLists.txt
@@ -15,6 +15,6 @@ if(NOT GAMMARAY_CLIENT_ONLY_BUILD)
         SOURCES
         bluetooth.cpp
     )
-    target_link_libraries(gammaray_bluetooth gammaray_core Qt::Bluetooth)
+    target_link_libraries(gammaray_bluetooth gammaray_core Qt::Bluetooth Qt::CorePrivate)
     set_target_properties(gammaray_bluetooth PROPERTIES DISABLE_PRECOMPILE_HEADERS ON)
 endif()
diff --git a/plugins/openglsupport/CMakeLists.txt b/plugins/openglsupport/CMakeLists.txt
index e5614be..f610a46 100644
--- a/plugins/openglsupport/CMakeLists.txt
+++ b/plugins/openglsupport/CMakeLists.txt
@@ -15,7 +15,7 @@ if(NOT GAMMARAY_CLIENT_ONLY_BUILD)
         SOURCES
         openglsupport.cpp
     )
-    target_link_libraries(gammaray_openglsupport gammaray_core Qt::Gui)
+    target_link_libraries(gammaray_openglsupport gammaray_core Qt::Gui Qt::CorePrivate)
     if(TARGET Qt6::OpenGL)
         target_link_libraries(gammaray_openglsupport Qt6::OpenGL)
     endif()
diff --git a/plugins/positioning/CMakeLists.txt b/plugins/positioning/CMakeLists.txt
index e19616a..8ea8bdd 100644
--- a/plugins/positioning/CMakeLists.txt
+++ b/plugins/positioning/CMakeLists.txt
@@ -16,7 +16,7 @@ if(NOT GAMMARAY_CLIENT_ONLY_BUILD)
         SOURCES
         ${gammaray_positioning_srcs}
     )
-    target_link_libraries(gammaray_positioning gammaray_core Qt::Positioning)
+    target_link_libraries(gammaray_positioning gammaray_core Qt::Positioning Qt::CorePrivate)
     set_target_properties(gammaray_positioning PROPERTIES DISABLE_PRECOMPILE_HEADERS ON)
 
     # proxy geo position info source factory
diff --git a/plugins/qt3dinspector/CMakeLists.txt b/plugins/qt3dinspector/CMakeLists.txt
index ab514d9..31bed03 100644
--- a/plugins/qt3dinspector/CMakeLists.txt
+++ b/plugins/qt3dinspector/CMakeLists.txt
@@ -33,6 +33,7 @@ if(NOT GAMMARAY_CLIENT_ONLY_BUILD)
         gammaray_kitemmodels
         Qt::3DInput
         Qt::3DRender
+        Qt::CorePrivate
     )
     if(TARGET Qt::3DAnimation)
         target_link_libraries(gammaray_3dinspector Qt::3DAnimation)
diff --git a/plugins/quickwidgetsupport/CMakeLists.txt b/plugins/quickwidgetsupport/CMakeLists.txt
index 99b1211..1dcbc19 100644
--- a/plugins/quickwidgetsupport/CMakeLists.txt
+++ b/plugins/quickwidgetsupport/CMakeLists.txt
@@ -16,5 +16,5 @@ if(NOT GAMMARAY_CLIENT_ONLY_BUILD)
         SOURCES
         ${gammaray_quickwidgetsupport_srcs}
     )
-    target_link_libraries(gammaray_quickwidgetsupport gammaray_core Qt::QuickWidgets)
+    target_link_libraries(gammaray_quickwidgetsupport gammaray_core Qt::QuickWidgets Qt::CorePrivate)
 endif()
diff --git a/plugins/sceneinspector/CMakeLists.txt b/plugins/sceneinspector/CMakeLists.txt
index 8ebbfd8..2de614b 100644
--- a/plugins/sceneinspector/CMakeLists.txt
+++ b/plugins/sceneinspector/CMakeLists.txt
@@ -23,6 +23,7 @@ if(NOT GAMMARAY_CLIENT_ONLY_BUILD)
     target_link_libraries(
         gammaray_sceneinspector_plugin
         Qt::Gui
+        Qt::CorePrivate
         Qt::Widgets
         gammaray_kitemmodels
         gammaray_core
diff --git a/plugins/textdocumentinspector/CMakeLists.txt b/plugins/textdocumentinspector/CMakeLists.txt
index 1e5f3a9..655f351 100644
--- a/plugins/textdocumentinspector/CMakeLists.txt
+++ b/plugins/textdocumentinspector/CMakeLists.txt
@@ -17,7 +17,7 @@ if(NOT GAMMARAY_CLIENT_ONLY_BUILD)
         ${gammaray_textdocumentinspector_srcs}
     )
     target_link_libraries(gammaray_textdocumentinspector gammaray_core)
-    target_link_libraries(gammaray_textdocumentinspector Qt::Gui)
+    target_link_libraries(gammaray_textdocumentinspector Qt::Gui Qt::CorePrivate)
 endif()
 
 # ui plugin
diff --git a/plugins/widgetinspector/CMakeLists.txt b/plugins/widgetinspector/CMakeLists.txt
index 18b2897..019aa5d 100644
--- a/plugins/widgetinspector/CMakeLists.txt
+++ b/plugins/widgetinspector/CMakeLists.txt
@@ -30,6 +30,7 @@ if(NOT GAMMARAY_CLIENT_ONLY_BUILD)
     target_link_libraries(
         gammaray_widgetinspector_plugin
         Qt::Gui
+        Qt::CorePrivate
         Qt::Widgets
         gammaray_kitemmodels
         gammaray_core
diff --git a/plugins/wlcompositorinspector/CMakeLists.txt b/plugins/wlcompositorinspector/CMakeLists.txt
index 9d8c0e5..144d23b 100644
--- a/plugins/wlcompositorinspector/CMakeLists.txt
+++ b/plugins/wlcompositorinspector/CMakeLists.txt
@@ -31,6 +31,7 @@ if(NOT GAMMARAY_CLIENT_ONLY_BUILD)
             gammaray_core
             gammaray_kitemmodels
             Qt::WaylandCompositor
+            Qt::CorePrivate
             Wayland::Server
         )
 
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index 6057ffd..608b585 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -231,7 +231,7 @@ target_link_libraries(
 
 gammaray_add_test(metaobjecttest metaobjecttest.cpp)
 target_link_libraries(
-    metaobjecttest gammaray_core
+    metaobjecttest Qt::CorePrivate gammaray_core
 )
 
 if(NOT GAMMARAY_CLIENT_ONLY_BUILD)
@@ -257,7 +257,11 @@ target_link_libraries(
 
 gammaray_add_test(propertyadaptortest propertyadaptortest.cpp)
 target_link_libraries(
-    propertyadaptortest gammaray_core Qt::Gui gammaray_shared_test_data
+    propertyadaptortest
+    gammaray_core
+    Qt::Gui
+    Qt::CorePrivate
+    gammaray_shared_test_data
 )
 
 if(HAVE_QT_WIDGETS)
